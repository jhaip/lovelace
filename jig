#!/bin/bash

function cmd() {
  if [ "$1" == "start" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    node src/standalone_processes/0__boot.js &
    echo -e "booting"
  elif [ "$1" == "cvstart" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    python3 src/standalone_processes/50__proxy.py &
    python3 src/standalone_processes/1600__frame-to-dots.py &
    cd src/standalone_processes
    go run 1800__dots-to-papers.go &
    cd ../..
    echo -e "booting"
  elif [ "$1" == "laserstart" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    v4l2-ctl \
      --set-ctrl=brightness=1 \
      --set-ctrl=contrast=128 \
      --set-ctrl=saturation=0 \
      --set-ctrl=gain=0 \
      --set-ctrl=white_balance_temperature_auto=0 \
      --set-ctrl=white_balance_temperature=3000 \
      --set-ctrl=sharpness=128 \
      --set-ctrl=backlight_compensation=0 \
      --set-ctrl=exposure_auto=1 \
      --set-ctrl=exposure_absolute=150 \
      --set-ctrl=focus_auto=0
    v4l2-ctl --device /dev/video0 --set-fmt-video=width=1920,height=1080,pixelformat=MPEG
    python3 src/standalone_processes/54__laserProxy.py &
    python3 src/standalone_processes/1620__seeLaser.py &
    sudo python3 src/standalone_processes/649__keyboard.py &
    echo -e "booting"
  elif [ "$1" == "lasersocksstart" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    v4l2-ctl \
      --set-ctrl=brightness=1 \
      --set-ctrl=contrast=128 \
      --set-ctrl=saturation=0 \
      --set-ctrl=gain=0 \
      --set-ctrl=white_balance_temperature_auto=0 \
      --set-ctrl=white_balance_temperature=3000 \
      --set-ctrl=sharpness=128 \
      --set-ctrl=backlight_compensation=0 \
      --set-ctrl=exposure_auto=1 \
      --set-ctrl=exposure_absolute=150 \
      --set-ctrl=focus_auto=0
    v4l2-ctl --device /dev/video0 --set-fmt-video=width=1920,height=1080,pixelformat=MPEG
    node src/standalone_processes/0__boot.js &
    python3 src/standalone_processes/280__makeLaserRegion.py &
    python3 src/standalone_processes/281__laserInRegion.py &
    node src/standalone_processes/909__laserSocksReferee.js &
    python3 src/standalone_processes/910__laserSocksScoreboard.py &
    python3 src/standalone_processes/1620__seeLaser.py &
    sudo python3 src/standalone_processes/649__keyboard.py &
    echo -e "booting"
  elif [ "$1" == "tilestart" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    v4l2-ctl \
      --set-ctrl=brightness=50 \
      --set-ctrl=contrast=150 \
      --set-ctrl=saturation=128 \
      --set-ctrl=white_balance_temperature_auto=0 \
      --set-ctrl=gain=0 \
      --set-ctrl=power_line_frequency=2 \
      --set-ctrl=white_balance_temperature=3000 \
      --set-ctrl=sharpness=128 \
      --set-ctrl=backlight_compensation=0 \
      --set-ctrl=exposure_auto=3 \
      --set-ctrl=exposure_auto_priority=0 \
      --set-ctrl=focus_auto=1
    v4l2-ctl --device /dev/video0 --set-fmt-video=width=1920,height=1080,pixelformat=MPEG
    sleep 2
    python3 src/standalone_processes/53__tileProxy.py &
    python3 src/standalone_processes/1610__seeCodeBlocks.py &
    echo -e "booting"
  elif [ "$1" == "keyboardstart" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    python3 src/standalone_processes/51__proxy.py &
    sudo python3 src/standalone_processes/649__keyboard.py &
    echo -e "booting"
  elif [ "$1" == "robotstart" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    node src/standalone_processes/577__programEditor.js &
    node src/standalone_processes/1900__processManager.js &
    node src/standalone_processes/105__robotCodeRunner.js &
    node src/standalone_processes/10__debugViewer.js &
    echo -e "booting"
  elif [ "$1" == "camerastart" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    python3 src/standalone_processes/55__frameProxy.py &
    python3 src/standalone_processes/1630__claimFrame.py &
    echo -e "booting"
  elif [ "$1" == "calendarstart" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    node src/standalone_processes/20__httpClient.js &
    node src/standalone_processes/12__regionDebug.js &
    node src/standalone_processes/1246__webDisplay.js &
    echo -e "booting"
    sleep 5
    chromium-browser --start-fullscreen http://localhost:3012
  elif [ "$1" == "editorstart" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    node src/standalone_processes/1900__processManager.js &
    node src/standalone_processes/10__debugViewer.js &
    node src/standalone_processes/20__httpClient.js &
    # node src/standalone_processes/40__parser.js &
    python3 src/standalone_processes/498__printingManager.py &
    # node src/standalone_processes/577__programEditor.js &
    sleep 3
    node src/standalone_processes/1013__textEditor.js &
    node src/standalone_processes/1804__editPaperSeen.js &
    python3 src/standalone_processes/57__editorToServerProxy.py &
    python3 src/standalone_processes/1700__projectorDisplay.py &
    sudo python3 src/standalone_processes/649__keyboard.py &
    cd src/standalone_processes
    go run 1382__print-paper.go &
    go run 1800__dots-to-papers.go &
    cd ../..
    echo -e "booting"
  elif [ "$1" == "rfideditorstart" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    node src/standalone_processes/1900__processManager.js &
    node src/standalone_processes/10__debugViewer.js &
    node src/standalone_processes/20__httpClient.js &
    sleep 3
    node src/standalone_processes/1013__textEditor.js &
    node src/standalone_processes/1804__editPaperSeen.js &
    node src/standalone_processes/980__thermalPrintCode.js &
    python3 src/standalone_processes/57__editorToServerProxy.py &
    python3 src/standalone_processes/1700__projectorDisplay.py &
    sudo python3 src/standalone_processes/791__thermalPrinterLinux.py &
    sudo python3 src/standalone_processes/1192__circuitPythonProxy.py &
    sudo python3 src/standalone_processes/649__keyboard.py &
    echo -e "booting"
  elif [ "$1" == "rfideditorstart2" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    node src/standalone_processes/111__rfidEditorBoot.js &
    sleep 2
    sudo python3 src/standalone_processes/791__thermalPrinterLinux.py &
    sudo python3 src/standalone_processes/649__keyboard.py &
    echo -e "booting"
  elif [ "$1" == "test" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    node src/standalone_processes/1200__test.js &
    node src/standalone_processes/1201__test.js &
    for value in {1202..1210}
    do
      node src/standalone_processes/${value}__test.js &
    done
    echo -e "booting"
  elif [ "$1" == "testcp" ]
  then
    for value in {1211..1299}
    do
      cp src/standalone_processes/1202__test.js src/standalone_processes/${value}__test.js
    done
    echo -e "booting"
  elif [ "$1" == "pytest" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    python3 src/standalone_processes/1300__test.py &
    for value in {1301..1310}
    do
      python3 src/standalone_processes/1301__test.py $value &
    done
    echo -e "booting"
  elif [ "$1" == "gotest" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    cd src/standalone_processes
    go build 1400__exp.go
    for value in {1400..1499}
    do
      ./1400__exp $value &
    done
    echo -e "booting"
  elif [ "$1" == "stoptest" ]
  then
    pkill -f "go run server.go parser2.go subscriber.go database.go"
    pkill -f "/exe/server"
    pkill -f src/standalone_processes/12*__test.js
    pkill -f src/standalone_processes/13*__test.py
    pkill -f "1400__exp"
    pkill -f "node src/standalone_processes"
    pkill -f "python3 src/standalone_processes"
    pkill -f "go run src/standalone_processes"
    pkill -f "/tmp/go-build"
  elif [ "$1" == "stop" ]
  then
    pkill -f "go run server.go parser2.go subscriber.go database.go"
    pkill -f "/exe/server"
    pkill -f "src/standalone_processes/0__boot.js"
    pkill -f "node src/standalone_processes"
    pkill -f "python3 src/standalone_processes"
    pkill -f "go run src/standalone_processes"
    pkill -f "/tmp/go-build"
  elif [ "$1" == "webcam" ]
  then
    v4l2-ctl \
      --set-ctrl=brightness=128 \
      --set-ctrl=contrast=128 \
      --set-ctrl=saturation=128 \
      --set-ctrl=white_balance_temperature_auto=0 \
      --set-ctrl=gain=0 \
      --set-ctrl=power_line_frequency=2 \
      --set-ctrl=white_balance_temperature=3000 \
      --set-ctrl=sharpness=128 \
      --set-ctrl=backlight_compensation=0 \
      --set-ctrl=exposure_auto=3 \
      --set-ctrl=exposure_auto_priority=0 \
      --set-ctrl=focus_auto=1
    v4l2-ctl --device /dev/video0 --set-fmt-video=width=1920,height=1080,pixelformat=MPEG
  elif [ "$1" == "log" ]
  then
    tail -f new-backend/go-server/server.log
  elif [ "$1" == "stopdisplays" ]
  then
    pkill --signal 9 -f src/standalone_processes/648__keyboard.py
    pkill --signal 9 -f src/standalone_processes/1700__projectorDisplay.py
    pkill --signal 9 -f src/standalone_processes/1701__projectorDisplay.py
  elif [ "$1" == "displays" ]
  then
    export DISPLAY=:0
    pkill --signal 9 -f src/standalone_processes/648__keyboard.py
    pkill --signal 9 -f src/standalone_processes/1700__projectorDisplay.py
    pkill --signal 9 -f src/standalone_processes/1701__projectorDisplay.py
    sleep 5
    python3 src/standalone_processes/648__keyboard.py &
    python3 src/standalone_processes/1700__projectorDisplay.py &
    # python3 src/standalone_processes/1701__projectorDisplay.py &
    sleep 5
    keyboard_pid=$(pgrep -f 648__keyboard.py)
    echo "keyboard pid $keyboard_pid"
    if [ -z "$keyboard_pid" ]
    then
      echo "no keyboard pid"
      exit
    fi
    keyboard_window_id=$(xdotool search --onlyvisible --pid $keyboard_pid)
    echo "keyboard window id $keyboard_window_id"
    if [ -z "$keyboard_window_id" ]
    then
      echo "no keyboard_window_id"
      exit
    fi
    xdotool windowmove $keyboard_window_id 0 0
    display_pid1=$(pgrep -f 1700__projectorDisplay.py)
    echo "display 1 pid $display_pid1"
    if [ -z "$display_pid1" ]
    then
      echo "no display_pid1"
      exit
    fi
    display_window_id1=$(xdotool search --onlyvisible --pid $display_pid1)
    if [ -z "$display_window_id1" ]
    then
      echo "no display_window_id1"
      exit
    fi
    echo "display 1 id $display_window_id1"
    xdotool windowmove $display_window_id1 0 0
    # display_pid2=$(pgrep -f 1701__projectorDisplay.py)
    # echo "display 2 pid $display_pid2"
    # if [ -z "$display_pid2" ]
    # then
    #  echo "no display_pid2"
    #  exit
    # fi
    # display_window_id2=$(xdotool search --onlyvisible --pid $display_pid2)
    # echo "display 2 id $display_window_id2"
    # if [ -z "$display_window_id2" ]
    # then
    #   echo "no display_window_id2"
    #   exit
    # fi
    # xdotool windowmove $display_window_id2 1921 0
    xdotool windowactivate $keyboard_window_id
  else
    echo -e "UNKNOWN COMMAND"
    exit 1
  fi
}

cmd $1 $2
