#!/bin/bash

function cmd() {
  if [ "$1" == "start" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    node src/standalone_processes/0__boot.js &
    echo -e "booting"
  elif [ "$1" == "test" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    node src/standalone_processes/1200__test.js &
    node src/standalone_processes/1201__test.js &
    node src/standalone_processes/1202__test.js &
    node src/standalone_processes/1203__test.js &
    node src/standalone_processes/1204__test.js &
    node src/standalone_processes/1205__test.js &
    node src/standalone_processes/1206__test.js &
    node src/standalone_processes/1207__test.js &
    node src/standalone_processes/1208__test.js &
    node src/standalone_processes/1209__test.js &
    node src/standalone_processes/1210__test.js &
    echo -e "booting"
  elif [ "$1" == "pytest" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    python3 src/standalone_processes/1300__test.py &
    python3 src/standalone_processes/1301__test.py &
    python3 src/standalone_processes/1302__test.py &
    python3 src/standalone_processes/1303__test.py &
    python3 src/standalone_processes/1304__test.py &
    python3 src/standalone_processes/1305__test.py &
    python3 src/standalone_processes/1306__test.py &
    python3 src/standalone_processes/1307__test.py &
    python3 src/standalone_processes/1308__test.py &
    python3 src/standalone_processes/1309__test.py &
    python3 src/standalone_processes/1310__test.py &
    python3 src/standalone_processes/1311__test.py &
    python3 src/standalone_processes/1312__test.py &
    python3 src/standalone_processes/1313__test.py &
    python3 src/standalone_processes/1314__test.py &
    python3 src/standalone_processes/1315__test.py &
    python3 src/standalone_processes/1316__test.py &
    python3 src/standalone_processes/1317__test.py &
    python3 src/standalone_processes/1318__test.py &
    python3 src/standalone_processes/1319__test.py &
    python3 src/standalone_processes/1320__test.py &
    echo -e "booting"
  elif [ "$1" == "gotest" ]
  then
    cd new-backend/go-server
    go run server.go parser2.go subscriber.go database.go &
    echo -e "running server"
    cd ../..
    sleep 2
    go run src/standalone_processes/1400__exp.go 1400 &
    go run src/standalone_processes/1400__exp.go 1401 &
    go run src/standalone_processes/1400__exp.go 1402 &
    go run src/standalone_processes/1400__exp.go 1403 &
    go run src/standalone_processes/1400__exp.go 1404 &
    go run src/standalone_processes/1400__exp.go 1405 &
    go run src/standalone_processes/1400__exp.go 1406 &
    go run src/standalone_processes/1400__exp.go 1407 &
    go run src/standalone_processes/1400__exp.go 1408 &
    go run src/standalone_processes/1400__exp.go 1409 &
    go run src/standalone_processes/1400__exp.go 1410 &
    go run src/standalone_processes/1400__exp.go 1411 &
    go run src/standalone_processes/1400__exp.go 1412 &
    go run src/standalone_processes/1400__exp.go 1413 &
    go run src/standalone_processes/1400__exp.go 1414 &
    go run src/standalone_processes/1400__exp.go 1415 &
    go run src/standalone_processes/1400__exp.go 1416 &
    go run src/standalone_processes/1400__exp.go 1417 &
    go run src/standalone_processes/1400__exp.go 1418 &
    go run src/standalone_processes/1400__exp.go 1419 &
    go run src/standalone_processes/1400__exp.go 1420 &
    echo -e "booting"
  elif [ "$1" == "stoptest" ]
  then
    pkill -f "go run server.go parser2.go subscriber.go database.go"
    pkill -f "/exe/server"
    pkill -f "src/standalone_processes/1200__test.js"
    pkill -f "src/standalone_processes/1201__test.js"
    pkill -f "src/standalone_processes/1202__test.js"
    pkill -f "src/standalone_processes/1203__test.js"
    pkill -f "src/standalone_processes/1204__test.js"
    pkill -f "src/standalone_processes/1205__test.js"
    pkill -f "src/standalone_processes/1206__test.js"
    pkill -f "src/standalone_processes/1207__test.js"
    pkill -f "src/standalone_processes/1208__test.js"
    pkill -f "src/standalone_processes/1209__test.js"
    pkill -f "src/standalone_processes/1210__test.js"
    pkill -f "src/standalone_processes/1300__test.py"
    pkill -f "src/standalone_processes/1301__test.py"
    pkill -f "src/standalone_processes/1302__test.py"
    pkill -f "src/standalone_processes/1303__test.py"
    pkill -f "src/standalone_processes/1304__test.py"
    pkill -f "src/standalone_processes/1305__test.py"
    pkill -f "src/standalone_processes/1306__test.py"
    pkill -f "src/standalone_processes/1307__test.py"
    pkill -f "src/standalone_processes/1308__test.py"
    pkill -f "src/standalone_processes/1309__test.py"
    pkill -f "src/standalone_processes/1310__test.py"
    pkill -f "src/standalone_processes/1311__test.py"
    pkill -f "src/standalone_processes/1312__test.py"
    pkill -f "src/standalone_processes/1313__test.py"
    pkill -f "src/standalone_processes/1314__test.py"
    pkill -f "src/standalone_processes/1315__test.py"
    pkill -f "src/standalone_processes/1316__test.py"
    pkill -f "src/standalone_processes/1317__test.py"
    pkill -f "src/standalone_processes/1318__test.py"
    pkill -f "src/standalone_processes/1319__test.py"
    pkill -f "src/standalone_processes/1320__test.py"
    pkill -f "1400__exp"
    pkill -f "node src/standalone_processes"
    pkill -f "python3 src/standalone_processes"
    pkill -f "go run src/standalone_processes"
    pkill -f "/tmp/go-build"
  elif [ "$1" == "stop" ]
  then
    pkill -f "go run server.go parser2.go subscriber.go database.go"
    pkill -f "/exe/server"
    pkill -f "src/standalone_processes/0__boot.js"
    pkill -f "node src/standalone_processes"
    pkill -f "python3 src/standalone_processes"
    pkill -f "go run src/standalone_processes"
    pkill -f "/tmp/go-build"
  elif [ "$1" == "webcam" ]
  then
    v4l2-ctl \
      --set-ctrl=brightness=128 \
      --set-ctrl=contrast=128 \
      --set-ctrl=saturation=128 \
      --set-ctrl=white_balance_temperature_auto=1 \
      --set-ctrl=gain=0 \
      --set-ctrl=power_line_frequency=2 \
      --set-ctrl=white_balance_temperature=4000 \
      --set-ctrl=sharpness=128 \
      --set-ctrl=backlight_compensation=0 \
      --set-ctrl=exposure_auto=3 \
      --set-ctrl=exposure_auto_priority=0 \
      --set-ctrl=focus_auto=1
    v4l2-ctl --device /dev/video0 --set-fmt-video=width=1920,height=1080,pixelformat=MPEG
  elif [ "$1" == "log" ]
  then
    tail -f new-backend/go-server/server.log
  elif [ "$1" == "stopdisplays" ]
  then
    pkill --signal 9 -f src/standalone_processes/648__keyboard.py
    pkill --signal 9 -f src/standalone_processes/1700__projectorDisplay.py
    pkill --signal 9 -f src/standalone_processes/1701__projectorDisplay.py
  elif [ "$1" == "displays" ]
  then
    export DISPLAY=:0
    pkill --signal 9 -f src/standalone_processes/648__keyboard.py
    pkill --signal 9 -f src/standalone_processes/1700__projectorDisplay.py
    pkill --signal 9 -f src/standalone_processes/1701__projectorDisplay.py
    sleep 5
    python3 src/standalone_processes/648__keyboard.py &
    python3 src/standalone_processes/1700__projectorDisplay.py &
    python3 src/standalone_processes/1701__projectorDisplay.py &
    sleep 5
    keyboard_pid=$(pgrep -f 648__keyboard.py)
    echo "keyboard pid $keyboard_pid"
    if [ -z "$keyboard_pid" ]
    then
      echo "no keyboard pid"
      exit
    fi
    keyboard_window_id=$(xdotool search --onlyvisible --pid $keyboard_pid)
    echo "keyboard window id $keyboard_window_id"
    if [ -z "$keyboard_window_id" ]
    then
      echo "no keyboard_window_id"
      exit
    fi
    xdotool windowmove $keyboard_window_id 0 0
    display_pid1=$(pgrep -f 1700__projectorDisplay.py)
    echo "display 1 pid $display_pid1"
    if [ -z "$display_pid1" ]
    then
      echo "no display_pid1"
      exit
    fi
    display_window_id1=$(xdotool search --onlyvisible --pid $display_pid1)
    if [ -z "$display_window_id1" ]
    then
      echo "no display_window_id1"
      exit
    fi
    echo "display 1 id $display_window_id1"
    xdotool windowmove $display_window_id1 0 0
    display_pid2=$(pgrep -f 1701__projectorDisplay.py)
    echo "display 2 pid $display_pid2"
    if [ -z "$display_pid2" ]
    then
      echo "no display_pid2"
      exit
    fi
    display_window_id2=$(xdotool search --onlyvisible --pid $display_pid2)
    echo "display 2 id $display_window_id2"
    if [ -z "$display_window_id2" ]
    then
      echo "no display_window_id2"
      exit
    fi
    xdotool windowmove $display_window_id2 1921 0
    xdotool windowactivate $keyboard_window_id
  else
    echo -e "UNKNOWN COMMAND"
    exit 1
  fi
}

cmd $1 $2
