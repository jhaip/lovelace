// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var roomupdatefbs = roomupdatefbs || {};

/**
 * @enum {number}
 */
roomupdatefbs.UpdateType = {
  Ping: 0,
  Claim: 1,
  Retract: 2,
  Subscribe: 3,
  Death: 4,
  SubscriptionDeath: 5
};

/**
 * @enum {string}
 */
roomupdatefbs.UpdateTypeName = {
  '0': 'Ping',
  '1': 'Claim',
  '2': 'Retract',
  '3': 'Subscribe',
  '4': 'Death',
  '5': 'SubscriptionDeath'
};

/**
 * @enum {number}
 */
roomupdatefbs.FactType = {
  Id: 0,
  Text: 1,
  Integer: 2,
  Float: 3,
  Binary: 4
};

/**
 * @enum {string}
 */
roomupdatefbs.FactTypeName = {
  '0': 'Id',
  '1': 'Text',
  '2': 'Integer',
  '3': 'Float',
  '4': 'Binary'
};

/**
 * @constructor
 */
roomupdatefbs.Fact = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {roomupdatefbs.Fact}
 */
roomupdatefbs.Fact.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {roomupdatefbs.Fact=} obj
 * @returns {roomupdatefbs.Fact}
 */
roomupdatefbs.Fact.getRootAsFact = function(bb, obj) {
  return (obj || new roomupdatefbs.Fact).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {roomupdatefbs.Fact=} obj
 * @returns {roomupdatefbs.Fact}
 */
roomupdatefbs.Fact.getSizePrefixedRootAsFact = function(bb, obj) {
  return (obj || new roomupdatefbs.Fact).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {roomupdatefbs.FactType}
 */
roomupdatefbs.Fact.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {roomupdatefbs.FactType} */ (this.bb.readInt8(this.bb_pos + offset)) : roomupdatefbs.FactType.Id;
};

/**
 * @param {number} index
 * @returns {number}
 */
roomupdatefbs.Fact.prototype.value = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
roomupdatefbs.Fact.prototype.valueLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint8Array}
 */
roomupdatefbs.Fact.prototype.valueArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
roomupdatefbs.Fact.startFact = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {roomupdatefbs.FactType} type
 */
roomupdatefbs.Fact.addType = function(builder, type) {
  builder.addFieldInt8(0, type, roomupdatefbs.FactType.Id);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
roomupdatefbs.Fact.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(1, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.Fact.createValueVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
roomupdatefbs.Fact.startValueVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.Fact.endFact = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {roomupdatefbs.FactType} type
 * @param {flatbuffers.Offset} valueOffset
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.Fact.createFact = function(builder, type, valueOffset) {
  roomupdatefbs.Fact.startFact(builder);
  roomupdatefbs.Fact.addType(builder, type);
  roomupdatefbs.Fact.addValue(builder, valueOffset);
  return roomupdatefbs.Fact.endFact(builder);
}

/**
 * @constructor
 */
roomupdatefbs.RoomUpdate = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {roomupdatefbs.RoomUpdate}
 */
roomupdatefbs.RoomUpdate.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {roomupdatefbs.RoomUpdate=} obj
 * @returns {roomupdatefbs.RoomUpdate}
 */
roomupdatefbs.RoomUpdate.getRootAsRoomUpdate = function(bb, obj) {
  return (obj || new roomupdatefbs.RoomUpdate).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {roomupdatefbs.RoomUpdate=} obj
 * @returns {roomupdatefbs.RoomUpdate}
 */
roomupdatefbs.RoomUpdate.getSizePrefixedRootAsRoomUpdate = function(bb, obj) {
  return (obj || new roomupdatefbs.RoomUpdate).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {roomupdatefbs.UpdateType}
 */
roomupdatefbs.RoomUpdate.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {roomupdatefbs.UpdateType} */ (this.bb.readInt8(this.bb_pos + offset)) : roomupdatefbs.UpdateType.Ping;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
roomupdatefbs.RoomUpdate.prototype.source = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
roomupdatefbs.RoomUpdate.prototype.subscriptionId = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {roomupdatefbs.Fact=} obj
 * @returns {roomupdatefbs.Fact}
 */
roomupdatefbs.RoomUpdate.prototype.facts = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new roomupdatefbs.Fact).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
roomupdatefbs.RoomUpdate.prototype.factsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
roomupdatefbs.RoomUpdate.startRoomUpdate = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {roomupdatefbs.UpdateType} type
 */
roomupdatefbs.RoomUpdate.addType = function(builder, type) {
  builder.addFieldInt8(0, type, roomupdatefbs.UpdateType.Ping);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} sourceOffset
 */
roomupdatefbs.RoomUpdate.addSource = function(builder, sourceOffset) {
  builder.addFieldOffset(1, sourceOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} subscriptionIdOffset
 */
roomupdatefbs.RoomUpdate.addSubscriptionId = function(builder, subscriptionIdOffset) {
  builder.addFieldOffset(2, subscriptionIdOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} factsOffset
 */
roomupdatefbs.RoomUpdate.addFacts = function(builder, factsOffset) {
  builder.addFieldOffset(3, factsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.RoomUpdate.createFactsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
roomupdatefbs.RoomUpdate.startFactsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.RoomUpdate.endRoomUpdate = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {roomupdatefbs.UpdateType} type
 * @param {flatbuffers.Offset} sourceOffset
 * @param {flatbuffers.Offset} subscriptionIdOffset
 * @param {flatbuffers.Offset} factsOffset
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.RoomUpdate.createRoomUpdate = function(builder, type, sourceOffset, subscriptionIdOffset, factsOffset) {
  roomupdatefbs.RoomUpdate.startRoomUpdate(builder);
  roomupdatefbs.RoomUpdate.addType(builder, type);
  roomupdatefbs.RoomUpdate.addSource(builder, sourceOffset);
  roomupdatefbs.RoomUpdate.addSubscriptionId(builder, subscriptionIdOffset);
  roomupdatefbs.RoomUpdate.addFacts(builder, factsOffset);
  return roomupdatefbs.RoomUpdate.endRoomUpdate(builder);
}

/**
 * @constructor
 */
roomupdatefbs.RoomUpdates = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {roomupdatefbs.RoomUpdates}
 */
roomupdatefbs.RoomUpdates.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {roomupdatefbs.RoomUpdates=} obj
 * @returns {roomupdatefbs.RoomUpdates}
 */
roomupdatefbs.RoomUpdates.getRootAsRoomUpdates = function(bb, obj) {
  return (obj || new roomupdatefbs.RoomUpdates).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {roomupdatefbs.RoomUpdates=} obj
 * @returns {roomupdatefbs.RoomUpdates}
 */
roomupdatefbs.RoomUpdates.getSizePrefixedRootAsRoomUpdates = function(bb, obj) {
  return (obj || new roomupdatefbs.RoomUpdates).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {roomupdatefbs.RoomUpdate=} obj
 * @returns {roomupdatefbs.RoomUpdate}
 */
roomupdatefbs.RoomUpdates.prototype.updates = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new roomupdatefbs.RoomUpdate).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
roomupdatefbs.RoomUpdates.prototype.updatesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
roomupdatefbs.RoomUpdates.startRoomUpdates = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} updatesOffset
 */
roomupdatefbs.RoomUpdates.addUpdates = function(builder, updatesOffset) {
  builder.addFieldOffset(0, updatesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.RoomUpdates.createUpdatesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
roomupdatefbs.RoomUpdates.startUpdatesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.RoomUpdates.endRoomUpdates = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
roomupdatefbs.RoomUpdates.finishRoomUpdatesBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
roomupdatefbs.RoomUpdates.finishSizePrefixedRoomUpdatesBuffer = function(builder, offset) {
  builder.finish(offset, undefined, true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} updatesOffset
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.RoomUpdates.createRoomUpdates = function(builder, updatesOffset) {
  roomupdatefbs.RoomUpdates.startRoomUpdates(builder);
  roomupdatefbs.RoomUpdates.addUpdates(builder, updatesOffset);
  return roomupdatefbs.RoomUpdates.endRoomUpdates(builder);
}

/**
 * @constructor
 */
roomupdatefbs.RoomResult = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {roomupdatefbs.RoomResult}
 */
roomupdatefbs.RoomResult.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {roomupdatefbs.RoomResult=} obj
 * @returns {roomupdatefbs.RoomResult}
 */
roomupdatefbs.RoomResult.getRootAsRoomResult = function(bb, obj) {
  return (obj || new roomupdatefbs.RoomResult).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {roomupdatefbs.RoomResult=} obj
 * @returns {roomupdatefbs.RoomResult}
 */
roomupdatefbs.RoomResult.getSizePrefixedRootAsRoomResult = function(bb, obj) {
  return (obj || new roomupdatefbs.RoomResult).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
roomupdatefbs.RoomResult.prototype.variableName = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {roomupdatefbs.FactType}
 */
roomupdatefbs.RoomResult.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? /** @type {roomupdatefbs.FactType} */ (this.bb.readInt8(this.bb_pos + offset)) : roomupdatefbs.FactType.Id;
};

/**
 * @param {number} index
 * @returns {number}
 */
roomupdatefbs.RoomResult.prototype.value = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
roomupdatefbs.RoomResult.prototype.valueLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint8Array}
 */
roomupdatefbs.RoomResult.prototype.valueArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
roomupdatefbs.RoomResult.startRoomResult = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} variableNameOffset
 */
roomupdatefbs.RoomResult.addVariableName = function(builder, variableNameOffset) {
  builder.addFieldOffset(0, variableNameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {roomupdatefbs.FactType} type
 */
roomupdatefbs.RoomResult.addType = function(builder, type) {
  builder.addFieldInt8(1, type, roomupdatefbs.FactType.Id);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
roomupdatefbs.RoomResult.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(2, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.RoomResult.createValueVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
roomupdatefbs.RoomResult.startValueVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.RoomResult.endRoomResult = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} variableNameOffset
 * @param {roomupdatefbs.FactType} type
 * @param {flatbuffers.Offset} valueOffset
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.RoomResult.createRoomResult = function(builder, variableNameOffset, type, valueOffset) {
  roomupdatefbs.RoomResult.startRoomResult(builder);
  roomupdatefbs.RoomResult.addVariableName(builder, variableNameOffset);
  roomupdatefbs.RoomResult.addType(builder, type);
  roomupdatefbs.RoomResult.addValue(builder, valueOffset);
  return roomupdatefbs.RoomResult.endRoomResult(builder);
}

/**
 * @constructor
 */
roomupdatefbs.ResultSet = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {roomupdatefbs.ResultSet}
 */
roomupdatefbs.ResultSet.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {roomupdatefbs.ResultSet=} obj
 * @returns {roomupdatefbs.ResultSet}
 */
roomupdatefbs.ResultSet.getRootAsResultSet = function(bb, obj) {
  return (obj || new roomupdatefbs.ResultSet).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {roomupdatefbs.ResultSet=} obj
 * @returns {roomupdatefbs.ResultSet}
 */
roomupdatefbs.ResultSet.getSizePrefixedRootAsResultSet = function(bb, obj) {
  return (obj || new roomupdatefbs.ResultSet).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {roomupdatefbs.RoomResult=} obj
 * @returns {roomupdatefbs.RoomResult}
 */
roomupdatefbs.ResultSet.prototype.results = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new roomupdatefbs.RoomResult).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
roomupdatefbs.ResultSet.prototype.resultsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
roomupdatefbs.ResultSet.startResultSet = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} resultsOffset
 */
roomupdatefbs.ResultSet.addResults = function(builder, resultsOffset) {
  builder.addFieldOffset(0, resultsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.ResultSet.createResultsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
roomupdatefbs.ResultSet.startResultsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.ResultSet.endResultSet = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} resultsOffset
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.ResultSet.createResultSet = function(builder, resultsOffset) {
  roomupdatefbs.ResultSet.startResultSet(builder);
  roomupdatefbs.ResultSet.addResults(builder, resultsOffset);
  return roomupdatefbs.ResultSet.endResultSet(builder);
}

/**
 * @constructor
 */
roomupdatefbs.RoomResponse = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {roomupdatefbs.RoomResponse}
 */
roomupdatefbs.RoomResponse.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {roomupdatefbs.RoomResponse=} obj
 * @returns {roomupdatefbs.RoomResponse}
 */
roomupdatefbs.RoomResponse.getRootAsRoomResponse = function(bb, obj) {
  return (obj || new roomupdatefbs.RoomResponse).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {roomupdatefbs.RoomResponse=} obj
 * @returns {roomupdatefbs.RoomResponse}
 */
roomupdatefbs.RoomResponse.getSizePrefixedRootAsRoomResponse = function(bb, obj) {
  return (obj || new roomupdatefbs.RoomResponse).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
roomupdatefbs.RoomResponse.prototype.source = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
roomupdatefbs.RoomResponse.prototype.subscriptionId = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {roomupdatefbs.ResultSet=} obj
 * @returns {roomupdatefbs.ResultSet}
 */
roomupdatefbs.RoomResponse.prototype.resultSets = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new roomupdatefbs.ResultSet).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
roomupdatefbs.RoomResponse.prototype.resultSetsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
roomupdatefbs.RoomResponse.startRoomResponse = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} sourceOffset
 */
roomupdatefbs.RoomResponse.addSource = function(builder, sourceOffset) {
  builder.addFieldOffset(0, sourceOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} subscriptionIdOffset
 */
roomupdatefbs.RoomResponse.addSubscriptionId = function(builder, subscriptionIdOffset) {
  builder.addFieldOffset(1, subscriptionIdOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} resultSetsOffset
 */
roomupdatefbs.RoomResponse.addResultSets = function(builder, resultSetsOffset) {
  builder.addFieldOffset(2, resultSetsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.RoomResponse.createResultSetsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
roomupdatefbs.RoomResponse.startResultSetsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.RoomResponse.endRoomResponse = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} sourceOffset
 * @param {flatbuffers.Offset} subscriptionIdOffset
 * @param {flatbuffers.Offset} resultSetsOffset
 * @returns {flatbuffers.Offset}
 */
roomupdatefbs.RoomResponse.createRoomResponse = function(builder, sourceOffset, subscriptionIdOffset, resultSetsOffset) {
  roomupdatefbs.RoomResponse.startRoomResponse(builder);
  roomupdatefbs.RoomResponse.addSource(builder, sourceOffset);
  roomupdatefbs.RoomResponse.addSubscriptionId(builder, subscriptionIdOffset);
  roomupdatefbs.RoomResponse.addResultSets(builder, resultSetsOffset);
  return roomupdatefbs.RoomResponse.endRoomResponse(builder);
}

// Exports for Node.js and RequireJS
this.roomupdatefbs = roomupdatefbs;
