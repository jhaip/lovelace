// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package roomupdatefbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RoomResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsRoomResponse(buf []byte, offset flatbuffers.UOffsetT) *RoomResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RoomResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RoomResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RoomResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RoomResponse) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RoomResponse) SubscriptionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RoomResponse) ResultSets(obj *ResultSet, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RoomResponse) ResultSetsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RoomResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RoomResponseAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(source), 0)
}
func RoomResponseAddSubscriptionId(builder *flatbuffers.Builder, subscriptionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(subscriptionId), 0)
}
func RoomResponseAddResultSets(builder *flatbuffers.Builder, resultSets flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(resultSets), 0)
}
func RoomResponseStartResultSetsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RoomResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
