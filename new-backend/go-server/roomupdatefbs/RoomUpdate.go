// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package roomupdatefbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RoomUpdate struct {
	_tab flatbuffers.Table
}

func GetRootAsRoomUpdate(buf []byte, offset flatbuffers.UOffsetT) *RoomUpdate {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RoomUpdate{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RoomUpdate) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RoomUpdate) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RoomUpdate) Type() UpdateType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return UpdateType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *RoomUpdate) MutateType(n UpdateType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *RoomUpdate) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RoomUpdate) SubscriptionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RoomUpdate) Facts(obj *Fact, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RoomUpdate) FactsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RoomUpdateStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func RoomUpdateAddType(builder *flatbuffers.Builder, type_ UpdateType) {
	builder.PrependInt8Slot(0, int8(type_), 0)
}
func RoomUpdateAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(source), 0)
}
func RoomUpdateAddSubscriptionId(builder *flatbuffers.Builder, subscriptionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(subscriptionId), 0)
}
func RoomUpdateAddFacts(builder *flatbuffers.Builder, facts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(facts), 0)
}
func RoomUpdateStartFactsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RoomUpdateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
